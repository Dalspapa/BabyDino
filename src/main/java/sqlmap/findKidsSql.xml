<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="dino.findKids">

	<!-- 선생님 카드 등록 -->
	<insert id="t_makeCard" parameterType="dino.dto.MakeTCardDto">
		<selectKey keyProperty="idx" resultType="dino.dto.MakeTCardDto" order="AFTER">
			SELECT max(idx) from d_teachercard 
		</selectKey>
		insert into
			d_teachercard
		values(
			d_teachercard_idx.nextval,
			#{d_member_idx},
			#{job},
			'1,2,3',		<!-- 퀴즈, 등본, 성범죄 조회 = 필수검증 -->
			#{kid_type},
			#{t_care_type},
			null,
			null,
			#{t_cost},
			#{t_introduce},
			#{bank},
			#{acnum},
			#{cctvagree},
			#{career_experience}
		)
	</insert>



	<!-- 아이찾기 검색-->
	<select id="searchKids" resultType="dino.findkids.model.FindKidsJoinDto" parameterType="dino.findkids.model.FindKidsJoinDto">
	<![CDATA[
	SELECT
	      r.cost
	    , r.idx
	    , r.kid_idx
	    , r.member_p_idx
	    , r.status
	    , pm.addr1
	    , pm.addr2
	    , pm.addr3
	    , k.k_name
	    , k.k_gender
	    , (to_char(sysdate,'yyyy') - to_char(k.k_birth,'yyyy')) as age
	    , k.k_tendency
	    , k.k_care_type
	    , k.k_require
	    , k.k_introduce
	    , NVL(i.c_imgpath,'noimage.png') AS c_imgpath
	    , k.teacher_type
	    , TO_CHAR(start_date, 'yyyy-mm-dd')  	AS start_day
	    , TO_CHAR(end_date, 'yyyy-mm-dd')   	AS end_day
	    , TO_CHAR(start_date, 'hh24')  			AS start_time
	    , TO_CHAR(end_date, 'hh24')   			AS end_time
	FROM d_reserve r
	       , (select * from d_member where member_type in ( 2, 8 ) ) pm            -- (학부모  : member)
	       , (select * from d_member where member_type in ( 4, 5, 6, 7, 10 ) ) tm  -- (선생님  : member)
	       , d_kidcard     k                          --아이카드
	       , d_common_img  i                          --이미지
	       , d_teachercard tc                         --선생님카드
	where 1=1
	  and r.member_p_idx     = pm.idx                -- 학부모 예약은 학부모가 하므로 필수
	  and r.teacher_idx      = tm.idx(+)             -- 선생님
	  and r.kid_idx          = k.idx                 -- 아이카드
	  and r.kid_idx          = i.ref_idx(+)         	 -- 아이이미지
	  and r.teacher_idx      = tc.idx(+)             -- 선생님카드
	]]>
	<if test='orderByNear != null and orderByNear != "" and orderByNear == "on" and idx != null and idx != ""'>
	  /* 근거리 (학부모 이거나 선생님 접속시) */
	  and (
	       r.teacher_idx  = #{idx}
	       or
	       r.member_p_idx = #{idx}
	  )
	  and (
           pm.addr1 between pm.addr1-10 and pm.addr1+10  /* 학부모 */
           or
           tm.addr1 between tm.addr1-10 and tm.addr1+10  /* 선생님 */
	      )
	</if>
	<if test="reserve_date != null and reserve_date != '' and start_date != null and start_date != '' and end_date != null and end_date !=''">
	  /* 캐어일자 */
	<![CDATA[
	  and r.start_date <= to_date(#{reserve_date}||LPAD(#{end_date},2,0),   'yyyy-mm-ddhh24')
	  and r.end_date   >= to_date(#{reserve_date}||LPAD(#{start_date},2,0), 'yyyy-mm-ddhh24')
	]]>
	</if>
	<if test="k_care_type_list != null">
	  /* 캐어타입 */
	  and exists (
			       select 1
			         from d_kid_caretype
			        where KIDS_IDX = r.kid_idx
					  and k.k_care_type IN <foreach collection="k_care_type_list" item="item" open="(" close=")" separator=",">#{item}</foreach>
				 )
	</if>
	<if test="age_list != null">
	  /* 연령 */
	  and (to_char(sysdate,'yyyy') - to_char(k.k_birth,'yyyy')) IN <foreach collection="age_list" item="item" open="(" close=")" separator=",">#{item}</foreach>
	</if>
	<if test="k_name != null and k_name != ''">
	  /* 이름 */
	  and k.k_name like '%' || #{k_name} ||'%'
	</if>
	<if test="k_gender != null and k_gender != ''">
	  /* 성별 */
	  and k.k_gender = #{k_gender}
	</if>
	<choose>
		<when test='teacher_cost != null and teacher_cost != "" and teacher_cost =="high"'>
		/* 선생님 비용 높은순 */
		order by cost desc
		</when>
		<when test='teacher_cost != null and teacher_cost != "" and teacher_cost =="low"'>
		/* 선생님 비용 낮은순 */
		order by cost
		</when>
		<when test='orderByMeet != null and orderByMeet != "" and orderByMeet =="on"'>
		/* 만났던 최근순 */
		order by r.match_date desc
		</when>
		<otherwise>
		/* 선택한게 없으면 캐어유형순 */
		order by k.k_care_type
		</otherwise>
	</choose>

	</select>

	<!-- 선생님 고유번호 조회 -->
	<select id="getTIdx" parameterType="Integer" resultType="Integer">
		select
			idx
		from
			(select * from d_teachercard order by idx desc)
		where
			rownum = 1 and d_member_idx = #{d_member_idx}
	</select>

	<!-- 이미지 인서트 -->
	<insert id="tSetImg" parameterType="dino.dto.Common_ImgDto">
		INSERT INTO
			d_common_img
		VALUES(
			d_common_img_idx.nextval,
			#{c_imgpath},
			#{d_member_idx},
			2,
			#{ref_idx}
		)
	</insert>

	<!-- 선생님 필수 인증 정보 입력 //////////////주호 -->
	<insert id="setCert" parameterType="dino.findkids.model.TeacherCertDto">

		INSERT INTO
			d_teachercert
		VALUES(
   			 d_teachercert_idx.nextval
    		,#{exemplification}
    		,#{crimeagree}
    		,#{d_member_idx}
		)
<!-- //////////////주호 끝 -->

	</insert>

	<!-- 이미지 출력 -->
	<select id="getImg" parameterType="Integer" resultType="dino.dto.Common_ImgDto" >
	    SELECT
	        dt.*, dci.c_imgpath
	    FROM
	        d_teachercard dt
	    LEFT JOIN
	        d_common_img dci
	    ON
	        dt.d_member_idx = dci.d_member_idx
	    WHERE
	        dt.d_member_idx = #{d_member_idx}
	</select>

	<!-- 아이카드 상세정보  -->
	<select id="kidInfoContent" parameterType="Integer" resultType="dino.findkids.model.FindKidsJoinDto">
		SELECT  r.cost
		        , to_char(start_date, 'hh24')
		        , to_char(end_date, 'hh24')
		        , r.kid_idx
		        , r.member_p_idx
		        , m.addr1
		        , m.addr2
		        , m.addr3
		        , k.k_name
		        , k.k_gender
		        , k.k_birth
		        , k.k_tendency
		        , k.k_care_type
		        , k.k_require
		        , k.k_introduce
		        , NVL(i.c_imgpath, 'noimage.png') AS c_imgpath
		        , k.teacher_type
		        , r.idx
	    FROM
		  		  d_reserve r
			LEFT JOIN d_member m ON m.idx = r.member_p_idx
			LEFT JOIN d_kidcard k ON k.idx = r.kid_idx
			LEFT JOIN d_common_img i on i.ref_idx = k.idx
		WHERE
				r.idx = #{idx}
	</select>

	<!-- 선생님 등급 수정 -->
	<update id="updateTeacherGrade" parameterType="dino.dto.MemberDto">
	   /* findKidsSql.updateTeacherGrade */
	   UPDATE D_MEMBER
	      SET MEMBER_TYPE = #{member_type}
	        , UPD_DT      = SYSDATE
	        , UPD_ID      = #{updId}
	    WHERE IDX = #{idx}
	</update>

	<!-- 선생님 grade 수정 -->
	<update id="teacherGradeUpd" parameterType="Integer">
		UPDATE D_MEMBER
	      SET MEMBER_TYPE = 6
	        , UPD_DT      = SYSDATE
	        , UPD_ID      = #{updId}
	    WHERE IDX = #{idx}
	</update>

	<!-- 선생님 grade 조회 / 세션 등록 위함 -->
	<select id="UpdGrade" parameterType="String" resultType="Integer">
		SELECT
			MEMBER_TYPE
		FROM
			D_MEMBER
		WHERE ID = #{id}
	</select>
	
	<!-- 예약카드 선생님 매칭 -->
	<update id="updateReserveCard" parameterType="dino.dto.ReserveDto">
		UPDATE 
			D_RESERVE
		SET
			MATCH_DATE = SYSDATE,
			TEACHER_IDX = #{teacher_idx}
		WHERE IDX = #{idx} 
	</update>

</mapper>













